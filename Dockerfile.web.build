ARG NODE_VERSION=20.5.0


################################################################################
# Use node image for base image for all stages.
FROM --platform=linux/amd64 node:${NODE_VERSION}-bookworm-slim as base

ARG YARN_VERSION=4.0.2

# Set working directory for all build stages.
WORKDIR /usr/src/app
#yarn v4.0.2
RUN corepack enable && corepack prepare yarn@${YARN_VERSION} && yarn set version ${YARN_VERSION}


# add the user and group we'll need in our final image
# RUN addgroup --system --gid 1001 nodejs
# RUN adduser --system --uid 1001 nextjs

################################################################################
# Create a stage for installing production dependecies.
FROM base as deps
WORKDIR /usr/src/app

# Download dependencies as a separate step to take advantage of Docker's caching.
# Leverage a cache mount to /root/.yarn to speed up subsequent builds.
# Leverage bind mounts to package.json and yarn.lock to avoid having to copy them
# into this layer.


# COPY ./package* ./yarn* ./
COPY package.json yarn.lock ./

COPY apps/web/package.json ./apps/web/package.json
COPY packages/common/package.json ./packages/common/package.json
COPY packages/ui/package.json ./packages/ui/package.json
COPY packages/tsconfig/package.json ./packages/tsconfig/package.json

# RUN --mount=type=bind,source=package.json,target=package.json \
#     --mount=type=bind,source=yarn.lock,target=yarn.lock \
#     --mount=type=cache,target=/root/.yarn \
#     yarn install


# RUN yarn workspaces focus --all --production
RUN ls
RUN yarn install --frozen-lockfile


################################################################################
# Create a stage for building the application.
FROM deps as build
WORKDIR /usr/src/app

COPY --from=deps --chown=node:node /usr/src/app/.yarn/ ./.yarn/
COPY . .

RUN yarn && yarn web:build


################################################################################
# Create a new stage to run the application with minimal runtime dependencies
# where the necessary files are copied from the build stage.
FROM base as final
RUN chmod -R 777 /root
WORKDIR /usr/src/app



# RUN addgroup --system --gid 1001 nodejs
# RUN adduser --system --uid 1001 nextjs


# Set the correct permission for prerender cache
# RUN mkdir .next
# RUN chown nextjs:nodejs .next


# Use production node environment by default.
ENV NODE_ENV production

# Run the application as a non-root user.
USER node
# USER nextjs

# Copy package.json so that package manager commands can be used.
# COPY package.json ./

# COPY --from=build --chown=nextjs:nodejs /usr/src/app/apps/web/next.config.mjs ./
# COPY --from=build --chown=nextjs:nodejs /usr/src/app/apps/web/next-i18next.config.mjs ./
# COPY --from=build --chown=nextjs:nodejs /usr/src/app/apps/web/package.json ./
# COPY --from=build --chown=nextjs:nodejs /app/apps/web/next.config.mjs \
#                     /app/apps/web/next-i18next.config.mjs \
#                     /app/apps/web/package.json \
#                     ./


# Copy the production dependencies from the deps stage and also
# the built application from the build stage into the image.
# COPY --from=build /usr/src/app/.yarn ./.yarn

# COPY --from=build --chown=nextjs:nodejs /usr/src/app/apps/web/.next/standalone ./apps/web/
# COPY --from=build --chown=nextjs:nodejs /usr/src/app/apps/web/.next/static ./apps/web/static
# COPY --from=build --chown=nextjs:nodejs /usr/src/app/apps/web/public ./apps/web/public

# COPY --from=build --chown=nextjs:nodejs /usr/src/app/apps/web/node_modules ./apps/web/

# COPY --from=build --chown=node:node /usr/src/app/apps/web/ ./apps/web/
# COPY --chown=node:node ./packages/ ./packages/
COPY --from=build --chown=node:node /usr/src/app/ .
COPY --from=build --chown=node:node /usr/src/app/package.json .
COPY --from=build --chown=node:node /usr/src/app/yarn.lock .
COPY --from=build --chown=node:node /usr/src/app/.yarn/ ./.yarn/

# COPY --from=build /usr/src/app/ ./public

EXPOSE 3000

# Run the application.

CMD yarn web:start
# CMD ["node", "apps/web/server.js"]
